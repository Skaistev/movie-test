{
	"info": {
		"_postman_id": "a7ed7798-51bd-4f65-8af3-03406013bd5e",
		"name": "Movies",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34521176"
	},
	"item": [
		{
			"name": "create movie",
			"item": [
				{
					"name": "add a movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Each property in the response body has a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseData).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('rating').that.is.a('number');\r",
									"    pm.expect(responseData).to.have.property('director').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('year').that.is.a('number');\r",
									"});\r",
									"pm.test(\"Response body has 5 properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const propertiesCount = Object.keys(responseData).length;\r",
									"    pm.expect(propertiesCount).to.equal(5);\r",
									"});\r",
									"pm.test(\"Set the response body properties\", function () {\r",
									"    pm.environment.set(\"user_id\", pm.response.json().id);\r",
									"    pm.environment.set(\"title\", pm.response.json().title);\r",
									"    pm.environment.set(\"director\", pm.response.json().director);\r",
									"    pm.environment.set(\"rating\", pm.response.json().rating);\r",
									"     pm.environment.set(\"year\", pm.response.json().year);\r",
									"});\r",
									"pm.test(\"Year property length is 4\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.year.toString().length).to.eql(4);\r",
									"});\r",
									"pm.test(\"Rating property value is under 11\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.rating).to.be.below(11);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Kings\", \r\n    \"director\": \"Someone\", \r\n    \"year\": 2010, \r\n    \"rating\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}3006/movies",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each property in the response body has a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id', pm.environment.get(\"user_id\"));\r",
									"    pm.expect(responseData).to.have.property('title',pm.environment.get(\"title\"));\r",
									"    pm.expect(responseData).to.have.property('rating',pm.environment.get(\"rating\"));\r",
									"    pm.expect(responseData).to.have.property('director',pm.environment.get(\"director\"));\r",
									"    pm.expect(responseData).to.have.property('year',pm.environment.get(\"year\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response object has an 'id' property which is a number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number');\r",
									"});\r",
									"pm.test(\"Year property length is 4\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.year.toString().length).to.eql(4);\r",
									"});\r",
									"pm.test(\"Rating property length is less than 11\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.rating).to.be.below(11);\r",
									"});\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}3006/movies/{{user_id}}",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete movie",
			"item": [
				{
					"name": "remove a movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"pm.test(\"Response content type is text\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}3006/movies/{{user_id}}",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleted movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response content type is text\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}3006/movies/{{user_id}}",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"function checkProperty(obj, propertyName, expectedValue) {\r",
									"    for (const key in obj) {\r",
									"        if (obj.hasOwnProperty(key)) {\r",
									"            if (key === propertyName && obj[key] === expectedValue) {\r",
									"                return true;\r",
									"            }\r",
									"            if (typeof obj[key] === 'object' && obj[key] !== null) {\r",
									"                if (checkProperty(obj[key], propertyName, expectedValue)) {\r",
									"                    return true;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    return false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(`Check if any object contains property id with previously deleted value `, function() {\r",
									"    const result = checkProperty(pm.response.json(), \"id\", pm.environment.get(\"user_id\"));\r",
									"    pm.expect(result).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}3006/movies/",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "update movie",
			"item": [
				{
					"name": "add a movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Each property in the response body has a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseData).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('rating').that.is.a('number');\r",
									"    pm.expect(responseData).to.have.property('director').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('year').that.is.a('number');\r",
									"});\r",
									"pm.test(\"Response body has 5 properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const propertiesCount = Object.keys(responseData).length;\r",
									"    pm.expect(propertiesCount).to.equal(5);\r",
									"});\r",
									"pm.test(\"Set the response body properties\", function () {\r",
									"    pm.environment.set(\"user_id_put\", pm.response.json().id);\r",
									"    pm.environment.set(\"title_put\", pm.response.json().title);\r",
									"    pm.environment.set(\"director_put\", pm.response.json().director);\r",
									"    pm.environment.set(\"year_put\", pm.response.json().year);\r",
									"    pm.environment.set(\"rating_put\", pm.response.json().rating);\r",
									"});\r",
									"pm.test(\"Year property length is 4\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.year.toString().length).to.eql(4);\r",
									"});\r",
									"pm.test(\"Rating property value is under 11\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.rating).to.be.below(11);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Kings\", \r\n    \"director\": \"Anybody\", \r\n    \"year\": 2440, \r\n    \"rating\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}3006/movies",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "update movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Rating property value is under 11\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.rating).to.be.below(11);\r",
									"});\r",
									"pm.test(\"Each property in the response body has a valid value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id', pm.environment.get(\"user_id_put\"));\r",
									"    pm.expect(responseData).to.have.property('title',pm.environment.get(\"title_put\"));\r",
									"    pm.expect(responseData).to.have.property('director',pm.environment.get(\"director_put\"));\r",
									"    pm.expect(responseData).to.have.property('year',pm.environment.get(\"year_put\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is updated\", () => {\r",
									"  pm.expect(pm.response.json().rating).to.be.not.equal(pm.environment.get(\"rating_put\"))\r",
									"});\r",
									"pm.test(\"Set new rating value\",  () => {\r",
									"    pm.environment.set(\"rating_edited\", pm.response.json().rating);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Kings\", \r\n    \"director\": \"Anybody\", \r\n    \"year\": 2440, \r\n    \"rating\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}3006/movies/{{user_id_put}}",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies",
								"{{user_id_put}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array or an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.satisfy((response) => {\r",
									"        return Array.isArray(response) || typeof response === 'object';\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'id' property which is a number\", function () {\r",
									"    const response = pm.response.json();\r",
									"    response.forEach((movie) => {\r",
									"        pm.expect(movie).to.have.property('id').that.is.a('number');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"function checkProperties(obj, properties) {\r",
									"\r",
									"    const objectWithId = obj.find(obj => obj.id === pm.environment.get('user_id_put'));\r",
									"\r",
									"    for (const key in properties) {\r",
									"        if (objectWithId[key] !== properties[key]) {\r",
									"            return true;\r",
									"        }\r",
									"    }\r",
									"    return false;\r",
									"}\r",
									"\r",
									"pm.test(`Check if data contains id with matching properties`, function() {\r",
									"    const response = pm.response.json();\r",
									"    const propertiesToCheck = {\r",
									"        rating: pm.environment.get('rating_edited')\r",
									"    };\r",
									"    const result = checkProperties(response, propertiesToCheck);\r",
									"    console.log(result)\r",
									"    pm.expect(result).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}3006/movies",
							"host": [
								"{{url}}3006"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "all movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response is an array or an object\", function () {\r",
							"    pm.expect(pm.response.json()).to.satisfy((response) => {\r",
							"        return Array.isArray(response) || typeof response === 'object';\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has properties: id, title, rating, producer, and year\", function () {\r",
							"    const response = pm.response.json();\r",
							"    response.forEach((movie) => {\r",
							"        pm.expect(movie).to.have.property('id');\r",
							"        pm.expect(movie).to.have.property('title');\r",
							"        pm.expect(movie).to.have.property('rating');\r",
							"        pm.expect(movie).to.have.property('director');\r",
							"        pm.expect(movie).to.have.property('year');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response has 'id' property which is a number\", function () {\r",
							"    const response = pm.response.json();\r",
							"    response.forEach((movie) => {\r",
							"        pm.expect(movie).to.have.property('id').that.is.a('number');\r",
							"    });\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}3006/movies",
					"host": [
						"{{url}}3006"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		}
	]
}